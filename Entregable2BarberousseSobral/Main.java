import java.util.*;
import java.util.concurrent.*;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class Main {
    private static final int MAX_ACTIVE_PLAYERS = 4;
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("=== BIENVENIDO AL JUEGO CONCURRENTE ===");
        System.out.println("Configuraci√≥n inicial del juego\n");
        
        // ===== CONFIGURACI√ìN DEL TABLERO =====
        System.out.print("Ingrese el tama√±o del tablero (NxN): ");
        int boardSize = validatePositiveInput(scanner, "Tama√±o del tablero");
        
        // ===== CONFIGURACI√ìN DE JUGADORES =====
        System.out.print("Ingrese la cantidad total de jugadores: ");
        int totalPlayers = validatePositiveInput(scanner, "Cantidad de jugadores");
        
        if (totalPlayers > MAX_ACTIVE_PLAYERS) {
            System.out.println("‚ö†Ô∏è  Se permiten m√°ximo " + MAX_ACTIVE_PLAYERS + " jugadores activos simult√°neamente.");
            System.out.println("   Los jugadores restantes (" + (totalPlayers - MAX_ACTIVE_PLAYERS) + ") quedar√°n en cola de espera.");
        }
        
        // ===== CONFIGURACI√ìN DE TIEMPOS DE PARTIDA =====
        System.out.print("Ingrese el tiempo total de la partida (segundos): ");
        int gameTimeSeconds = validatePositiveInput(scanner, "Tiempo de partida");
        
        // ===== CONFIGURACI√ìN DE TIEMPOS DE JUGADORES =====
        System.out.println("\n--- Configuraci√≥n de tiempos de jugadores ---");
        System.out.print("Tiempo m√≠nimo entre turnos de jugadores (ms): ");
        int playerTurnMin = validatePositiveInput(scanner, "Tiempo m√≠nimo jugadores");
        
        System.out.print("Tiempo m√°ximo entre turnos de jugadores (ms): ");
        int playerTurnMax = validateMinMaxInput(scanner, playerTurnMin, "Tiempo m√°ximo jugadores");
        
        // ===== CONFIGURACI√ìN DE ROBOTS DE VIDA =====
        System.out.println("\n--- Configuraci√≥n de robots de vida (buenos) ---");
        System.out.print("Cantidad m√°xima de vidas que puede poner el robot de vida: ");
        int maxLifeBonuses = validatePositiveInput(scanner, "Cantidad m√°xima de vidas");
        
        System.out.print("Tiempo m√≠nimo entre acciones del robot de vida (ms): ");
        int lifeRobotMin = validatePositiveInput(scanner, "Tiempo m√≠nimo robot vida");
        
        System.out.print("Tiempo m√°ximo entre acciones del robot de vida (ms): ");
        int lifeRobotMax = validateMinMaxInput(scanner, lifeRobotMin, "Tiempo m√°ximo robot vida");
        
        // ===== CONFIGURACI√ìN DE ROBOTS DE MONEDAS =====
        System.out.println("\n--- Configuraci√≥n de robots de monedas (buenos) ---");
        System.out.print("Tiempo m√≠nimo entre acciones del robot de monedas (ms): ");
        int coinRobotMin = validatePositiveInput(scanner, "Tiempo m√≠nimo robot monedas");
        
        System.out.print("Tiempo m√°ximo entre acciones del robot de monedas (ms): ");
        int coinRobotMax = validateMinMaxInput(scanner, coinRobotMin, "Tiempo m√°ximo robot monedas");
        
        // ===== CONFIGURACI√ìN DE ROBOTS MALVADOS =====
        System.out.println("\n--- Configuraci√≥n de robots malvados ---");
        System.out.print("Tiempo m√≠nimo entre acciones del robot malvado (ms): ");
        int evilRobotMin = validatePositiveInput(scanner, "Tiempo m√≠nimo robot malvado");
        
        System.out.print("Tiempo m√°ximo entre acciones del robot malvado (ms): ");
        int evilRobotMax = validateMinMaxInput(scanner, evilRobotMin, "Tiempo m√°ximo robot malvado");
        
        scanner.close();
        
        // ===== MOSTRAR RESUMEN DE CONFIGURACI√ìN =====
        showGameConfiguration(boardSize, totalPlayers, gameTimeSeconds, 
                            playerTurnMin, playerTurnMax, maxLifeBonuses,
                            lifeRobotMin, lifeRobotMax, coinRobotMin, coinRobotMax,
                            evilRobotMin, evilRobotMax);
        
        System.out.println("‚úÖ Configuraci√≥n completada exitosamente.");
        System.out.println("üí° El juego est√° listo para iniciarse con estos par√°metros.");
        
        // ===== AQU√ç PUEDES AGREGAR LA L√ìGICA DE INICIO CUANDO LA NECESITES =====
        // startGame(boardSize, totalPlayers, gameTimeSeconds,
        //          playerTurnMin, playerTurnMax, maxLifeBonuses,
        //          lifeRobotMin, lifeRobotMax, coinRobotMin, coinRobotMax,
        //          evilRobotMin, evilRobotMax);
    }
    
    /**
     * Valida que el input sea un n√∫mero positivo
     */
    private static int validatePositiveInput(Scanner scanner, String fieldName) {
        int value;
        while (true) {
            try {
                value = scanner.nextInt();
                if (value > 0) {
                    break;
                } else {
                    System.out.print("‚ùå " + fieldName + " debe ser mayor a 0. Intente nuevamente: ");
                }
            } catch (InputMismatchException e) {
                System.out.print("‚ùå Ingrese un n√∫mero v√°lido para " + fieldName + ": ");
                scanner.next(); // Limpiar input inv√°lido
            }
        }
        return value;
    }
    
    /**
     * Valida que el m√°ximo sea mayor o igual al m√≠nimo
     */
    private static int validateMinMaxInput(Scanner scanner, int minValue, String fieldName) {
        int value;
        while (true) {
            try {
                value = scanner.nextInt();
                if (value >= minValue) {
                    break;
                } else {
                    System.out.print("‚ùå " + fieldName + " debe ser mayor o igual a " + minValue + ". Intente nuevamente: ");
                }
            } catch (InputMismatchException e) {
                System.out.print("‚ùå Ingrese un n√∫mero v√°lido para " + fieldName + ": ");
                scanner.next(); // Limpiar input inv√°lido
            }
        }
        return value;
    }
    
    /**
     * Muestra un resumen de la configuraci√≥n antes de iniciar el juego
     */
    private static void showGameConfiguration(int boardSize, int totalPlayers, int gameTimeSeconds,
                                            int playerTurnMin, int playerTurnMax, int maxLifeBonuses,
                                            int lifeRobotMin, int lifeRobotMax, int coinRobotMin, int coinRobotMax,
                                            int evilRobotMin, int evilRobotMax) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("               CONFIGURACI√ìN DEL JUEGO");
        System.out.println("=".repeat(60));
        System.out.println("üìã Tablero: " + boardSize + "x" + boardSize + " casillas");
        System.out.println("üë• Jugadores totales: " + totalPlayers + " (m√°ximo " + MAX_ACTIVE_PLAYERS + " activos)");
        System.out.println("‚è∞ Tiempo de partida: " + gameTimeSeconds + " segundos");
        System.out.println("üéÆ Turnos jugadores: " + playerTurnMin + "-" + playerTurnMax + " ms");
        System.out.println("‚ù§Ô∏è  Robot vida: " + maxLifeBonuses + " vidas m√°x, " + lifeRobotMin + "-" + lifeRobotMax + " ms");
        System.out.println("üí∞ Robot monedas: " + coinRobotMin + "-" + coinRobotMax + " ms");
        System.out.println("üíÄ Robot malvado: " + evilRobotMin + "-" + evilRobotMax + " ms");
        System.out.println("=".repeat(60));
        System.out.println("üöÄ Iniciando juego en 3 segundos...\n");
        
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}
    
    
